// Copyright Â© 2023 Thomas Rabaix <thomas.rabaix@gmail.com>.
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file.

// This file is autogenerated by GoLocales by processing the 
// CLDR data.

package {{.Code}}

import (
    "time"
    "fmt"

    . "github.com/rande/golocales/dto"
    . "github.com/rande/golocales/locales"
    {{ if .Locale.Parent -}}
        "github.com/rande/golocales/locales/{{ .Locale.Parent.Code }}"
    {{- end -}}
)

var l = &Locale{}

func init() {
    l.Name = Locale_{{.Code}}
{{- if .Locale.Parent }}
    l.Parent = {{ .Locale.Parent.Code }}.GetLocale()
{{- end }}
    l.Territories = map[string]*Territory{ // len {{ len .Territories }}
        {{- range .Territories }}
            {{ if $.Locale.IsRoot -}}
                {{.Const}}: { Numeric: "{{.Numeric}}", Alpha3: "{{.Alpha3}}"},
            {{- else -}}
                {{.Const}}: { Name: "{{.Name}}"},
            {{- end }}            
        {{- end }}
    } // end locale.Territories

    l.Currencies = map[string]*Currency{ // len {{ len .Currencies }}
        {{- range .Currencies }}
            {{ if $.Locale.IsRoot -}}
                {{.Const}}: {Symbol: "{{.Symbol}}", Digits: {{.Digits}}, Rounding: {{.Rounding}}, CashDigits: {{.CashDigits}}, CashRounding: {{.CashRounding}}, Numeric: "{{.Numeric}}" },
            {{- else -}}
                {{.Const}}: { {{ if .Symbol }}Symbol: "{{.Symbol}}",{{ end }} Name: "{{.Name}}"},
            {{- end }}
        {{- end }}
    } // end locale.Currencies

    l.TimeZones = map[string]TimeZone{ // len {{ len .TimeZones }}
        {{- range .TimeZones }}
            {{.Const}}: "{{.Name}}",
        {{- end }}
    } // end locale.TimeZones

    l.Number = &Number{
        Symbols: map[string]*Symbol{ // len {{ len .Locale.Number.Symbols }}
            {{ range .Locale.Number.Symbols }}
                "{{.System}}": {
                    System:"{{.System}}",
                    MinusSign:"{{.MinusSign}}",
                    PlusSign:"{{.PlusSign}}",
                    Exponential:"{{.Exponential}}",
                    SuperscriptingExponent:"{{.SuperscriptingExponent}}",
                    Decimal:"{{.Decimal}}",
                    Group: "{{.Group}}",
                    CurrencyGroup: "{{.CurrencyGroup}}",
                    PercentSign: "{{.PercentSign}}",
                    PerMilleSign:"{{.PerMilleSign}}",
                    ApproximatelySign: "{{.ApproximatelySign}}",
                    Infinity: "{{.Infinity}}",
                    TimeSeparator: "{{.TimeSeparator}}",
                },
            {{- end }}
        },
        MinimumGroupingDigits: {{ .Locale.Number.MinimumGroupingDigits }},
        DefaultNumberSystem: "{{ .Locale.Number.DefaultNumberSystem }}",
{{ if .Locale.Number.Decimals }}
        Decimals: map[string]FormatGroup{
            {{- range $numberingSystem, $group := .Locale.Number.Decimals }}
                // key is the numbering system
                "{{$numberingSystem}}": {
                    {{- range $type, $pattern := $group }}
                        "{{ $type }}": []*NumberFormat{ // len {{ len $pattern }}
                            {{- range $pattern }}
                                    // {{ .Pattern }}
                                    {Type: "{{.Type}}",Alt: "{{.Alt}}",Count: "{{.Count}}",PrimaryGroupingSize: {{.PrimaryGroupingSize}}, SecondaryGroupingSize: {{ .SecondaryGroupingSize }}, StandardPattern: "{{ .StandardPattern }}"},
                            {{- end }}
                        },
                    {{ end }}
                },
            {{- end -}}
        }, // end locale.Number.Decimals
{{- end }}
{{ if .Locale.Number.Percents }}
        Percents: map[string]FormatGroup{
            {{- range $numberingSystem, $group := .Locale.Number.Percents }}
                // key is the numbering system
                "{{$numberingSystem}}": {
                    {{- range $type, $pattern := $group }}
                        "{{ $type }}": []*NumberFormat{ // len {{ len $pattern }}
                            {{- range $pattern }}
                                    // {{ .Pattern }}
                                    {PrimaryGroupingSize: {{.PrimaryGroupingSize}}, SecondaryGroupingSize: {{ .SecondaryGroupingSize }}, StandardPattern: "{{ .StandardPattern }}"},
                            {{- end }}
                        },
                    {{ end }}
                },
            {{- end -}}
        }, // end locale.Number.Decimals
{{- end }}
{{ if .Locale.Number.Currencies }}
        Currencies: map[string]FormatGroup{
            {{- range $numberingSystem, $group := .Locale.Number.Currencies }}
                // key is the numbering system
                "{{$numberingSystem}}": {
                    {{- range $type, $pattern := $group }}
                        "{{ $type }}": []*NumberFormat{ // len {{ len $pattern }}
                            {{- range $pattern }}
                                    // {{ .Pattern }}
                                    {Type: "{{.Type}}",Alt: "{{.Alt}}",Count: "{{.Count}}",PrimaryGroupingSize: {{.PrimaryGroupingSize}}, SecondaryGroupingSize: {{ .SecondaryGroupingSize }}, StandardPattern: "{{ .StandardPattern }}"},
                            {{- end }}
                        },
                    {{ end }}
                },
            {{- end -}}
        }, // end locale.Number.Currencies
{{- end }}
    } // end locale.Number

    l.Calendars = map[string]*Calendar{ // len {{ len .Locale.Calendars }}
{{- range $type, $calendar := .Locale.Calendars }}
        "{{.System}}": {
            System: "{{.System}}",
            Labels: map[string][]string{ // len {{ len .Labels }}
                {{- range $key, $labels := .Labels }}
                    "{{$key}}": []string{ // len {{ len $labels }}
                        {{- range $labels }}
                            "{{.}}",
                        {{- end }}
                    },
                {{- end }}
            },
            Formatters: map[string]CalendarFormatter{ 
                {{- range $key, $formatter := $calendar.Formatters }}
                    "{{$key}}": func(tm time.Time, timeZone string) string {
                        if tz, err := time.LoadLocation(timeZone); err != nil {
                            panic(err)
                        } else {
                            t := tm.In(tz)

                            // {{$formatter.Pattern }} 
                            return {{$formatter.Func}}
                        }
                    },
                {{- end }}
            },
        },
{{- end }}
    } // end locale.Calendars
} // end init

func GetLocale() *Locale {
    return l
}