// Copyright Â© 2023 Thomas Rabaix <thomas.rabaix@gmail.com>.
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file.

// This file is autogenerated by GoLocales by processing the 
// CLDR data.

package {{.Code}}

import (
    "github.com/rande/golocales/dto"
    {{ if .Locale.Parent -}}
        "github.com/rande/golocales/locales/{{ .Locale.Parent.Code }}"
    {{- end -}}
)

var locale = &dto.Locale{
    Name: "{{.Code}}",
    {{- if .Locale.Parent }}
    Parent: {{ .Locale.Parent.Code }}.Locale(),
    {{- end }}
    Territories: map[string]dto.Territory{ // len {{ len .Territories }}
        {{- range .Territories }}
            {{ if $.Locale.IsRoot -}}
                "{{.Code}}": { Numeric: "{{.Numeric}}", Alpha3: "{{.Alpha3}}"},
            {{- else -}}
                "{{.Code}}": {Code: "{{.Code}}", Name: "{{.Name}}"},
            {{- end }}            
        {{- end }}
    },
    Currencies: map[string]*dto.Currency{ // len {{ len .Currencies }}
        {{- range .Currencies }}
            {{ if $.Locale.IsRoot -}}
                "{{.Code}}": &dto.Currency{Symbol: "{{.Symbol}}", Digits: {{.Digits}}, Rounding: {{.Rounding}}, CashDigits: {{.CashDigits}}, CashRounding: {{.CashRounding}}, Numeric: "{{.Numeric}}" },
            {{- else -}}
                "{{.Code}}": &dto.Currency{Symbol: "{{.Symbol}}", Name: "{{.Name}}"},
            {{- end }}
        {{- end }}
    },
    TimeZones: map[string]dto.TimeZone{ // len {{ len .TimeZones }}
        {{- range .TimeZones }}
            "{{.Code}}": "{{.Name}}",
        {{- end }}
    },
    Number: &dto.Number{
        Symbols: map[string]*dto.Symbol{ // len {{ len .Locale.Number.Symbols }}
            {{ range .Locale.Number.Symbols }}
                "{{.System}}": {
                    System:"{{.System}}",
                    MinusSign:"{{.MinusSign}}",
                    PlusSign:"{{.PlusSign}}",
                    Exponential:"{{.Exponential}}",
                    SuperscriptingExponent:"{{.SuperscriptingExponent}}",
                    Decimal:"{{.Decimal}}",
                    Group: "{{.Group}}",
                    PercentSign: "{{.PercentSign}}",
                    PerMilleSign:"{{.PerMilleSign}}",
                    ApproximatelySign: "{{.ApproximatelySign}}",
                    Infinity: "{{.Infinity}}",
                    TimeSeparator: "{{.TimeSeparator}}",
                },
            {{- end }}
        },
        MinimumGroupingDigits: {{ .Locale.Number.MinimumGroupingDigits }},
        DefaultNumberSystem: "{{ .Locale.Number.DefaultNumberSystem }}",
{{ if .Locale.Number.Decimals }}
        Decimals: map[string]dto.FormatGroup{
            {{- range $numberingSystem, $group := .Locale.Number.Decimals }}
                // key is the numbering system
                "{{$numberingSystem}}": dto.FormatGroup{
                    {{- range $type, $pattern := $group }}
                        "{{ $type }}": []*dto.NumberFormat{ // len {{ len $pattern }}
                            {{- range $pattern }}
                                    {Type: "{{.Type}}",Alt: "{{.Alt}}",Count: "{{.Count}}",Pattern: "{{.Pattern}}",PrimaryGroupingSize: {{.PrimaryGroupingSize}}, SecondaryGroupingSize: {{ .SecondaryGroupingSize }}, StandardPattern: "{{ .StandardPattern }}"},
                            {{- end }}
                        },
                    {{ end }}
                },
            {{- end -}}
        },
{{- end }}
{{ if .Locale.Number.Currencies }}
        Currencies: map[string]dto.FormatGroup{
            {{- range $numberingSystem, $group := .Locale.Number.Currencies }}
                // key is the numbering system
                "{{$numberingSystem}}": dto.FormatGroup{
                    {{- range $type, $pattern := $group }}
                        "{{ $type }}": []*dto.NumberFormat{ // len {{ len $pattern }}
                            {{- range $pattern }}
                                    {Type: "{{.Type}}",Alt: "{{.Alt}}",Count: "{{.Count}}",Pattern: "{{.Pattern}}",PrimaryGroupingSize: {{.PrimaryGroupingSize}}, SecondaryGroupingSize: {{ .SecondaryGroupingSize }}, StandardPattern: "{{ .StandardPattern }}"},
                            {{- end }}
                        },
                    {{ end }}
                },
            {{- end -}}
        },
{{- end }}
    },
}

func Locale() *dto.Locale {
    return locale
}