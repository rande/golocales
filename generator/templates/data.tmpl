// Copyright Â© 2023 Thomas Rabaix <thomas.rabaix@gmail.com>.
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file.

// This file is autogenerated by GoLocales by processing the 
// CLDR data.

package {{.Code}}

import (
    "github.com/rande/golocales/dto"
    {{ if .Locale.Parent -}}
        "github.com/rande/golocales/locales/{{ .Locale.Parent.Code }}"
    {{- end -}}
)

var locale = &dto.Locale{
    Name: "{{.Code}}",
    {{- if .Locale.Parent }}
    Parent: {{ .Locale.Parent.Code }}.Locale(),
    {{- end }}
    Territories: map[string]dto.Territory{ // len {{ len .Territories }}
        {{- range .Territories }}
            "{{.Code}}": "{{.Name}}",
        {{- end }}
    },
    Currencies: map[string]*dto.Currency{ // len {{ len .Currencies }}
        {{- range .Currencies }}
            "{{.Code}}": &dto.Currency{Symbol: "{{.Symbol}}", Name: "{{.Name}}"},
        {{- end }}
    },
    TimeZones: map[string]dto.TimeZone{ // len {{ len .TimeZones }}
        {{- range .TimeZones }}
            "{{.Code}}": "{{.Name}}",
        {{- end }}
    },
    Number: &dto.Number{
        Symbols: map[string]*dto.Symbol{ // len {{ len .Locale.Number.Symbols }}
            {{ range .Locale.Number.Symbols }}
                "{{.System}}": {
                    System:"{{.System}}",
                    MinusSign:"{{.MinusSign}}",
                    PlusSign:"{{.PlusSign}}",
                    Exponential:"{{.Exponential}}",
                    SuperscriptingExponent:"{{.SuperscriptingExponent}}",
                    Decimal:"{{.Decimal}}",
                    Group: "{{.Group}}",
                    PercentSign: "{{.PercentSign}}",
                    PerMilleSign:"{{.PerMilleSign}}",
                    ApproximatelySign: "{{.ApproximatelySign}}",
                    Infinity: "{{.Infinity}}",
                    TimeSeparator: "{{.TimeSeparator}}",
                },
            {{- end }}
        },
        MinimumGroupingDigits: {{ .Locale.Number.MinimumGroupingDigits }},
        DefaultNumberSystem: "{{ .Locale.Number.DefaultNumberSystem }}",
    {{ if .Locale.Number.Decimals }}
        Decimals: map[string]*dto.FormatGroup{
            {{- range $key, $value := .Locale.Number.Decimals }}
                "{{$key}}": &dto.FormatGroup{
                    {{ if .Long }}
                    Long: []*dto.NumberFormat{ // len {{ len .Long }}
                        {{- range .Long }}
                                {Type: "{{.Type}}",Count: "{{.Count}}",Pattern: "{{.Pattern}}",PrimaryGroupingSize: {{.PrimaryGroupingSize}}, SecondaryGroupingSize: {{ .SecondaryGroupingSize }}, StandardPattern: "{{ .StandardPattern }}"},
                        {{- end }}
                    },
                    {{- else -}}
                    // Long is empty
                    {{- end }}
                    {{ if .Short }}
                    Short: []*dto.NumberFormat{ // len {{ len .Short }}
                        {{- range .Short }}
                                {Type: "{{.Type}}",Count: "{{.Count}}",Pattern: "{{.Pattern}}",PrimaryGroupingSize: {{.PrimaryGroupingSize}}, SecondaryGroupingSize: {{ .SecondaryGroupingSize }}, StandardPattern: "{{ .StandardPattern }}"},
                        {{- end }}
                    },
                    {{- else -}}
                    // Short is empty
                    {{- end }}
                    {{ if .Default }}
                    Default: []*dto.NumberFormat{ // len {{ len .Default }}
                        {{- range .Default }}
                                {Type: "{{.Type}}",Count: "{{.Count}}",Pattern: "{{.Pattern}}",PrimaryGroupingSize: {{.PrimaryGroupingSize}}, SecondaryGroupingSize: {{ .SecondaryGroupingSize }}, StandardPattern: "{{ .StandardPattern }}"},
                        {{- end }}
                    },
                    {{- else -}}
                    // Default is empty
                    {{- end }}
                },
            {{- end -}}
        },
    {{ else }}
    // Decimal is empty
    {{ end }}
    },
}

func Locale() *dto.Locale {
    return locale
}